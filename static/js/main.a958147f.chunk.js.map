{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","poster","alt","src","title","className","MovieGenre","genre","prototype","propTypes","string","isRequired","Movie","genres","synopsis","map","index","key","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","movies","movie","console","log","title_english","medium_cover_image","id","_callApi","fetch","then","potato","json","data","catch","err","_getMovies","a","setState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+VAiEA,SAASA,EAAT,GAAoC,IAAdC,EAAa,EAAbA,OAAQC,EAAK,EAALA,IAC1B,OACI,yBAAKC,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKG,UAAU,kBAI1D,SAASC,EAAT,GAA6B,IAARC,EAAO,EAAPA,MACjB,OACA,0BAAMF,UAAU,gBAAgBE,GAepCD,EAAWE,UAAY,CACnBD,MAAQE,IAAUC,OAAOC,YAGdC,MAvFf,YAAkD,IAAlCR,EAAiC,EAAjCA,MAAOH,EAA0B,EAA1BA,OAAQY,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,SACnC,OACI,yBAAKT,UAAU,SACX,yBAAKA,UAAU,iBACX,kBAACL,EAAD,CAAaC,OAASA,EAAQC,IAAKE,KAEvC,yBAAKC,UAAU,iBACX,4BAAKD,GACL,yBAAKC,UAAU,iBACVQ,EAAOE,KAAI,SAACR,EAAOS,GAAR,OAAiB,kBAACV,EAAD,CAAYC,MAAOA,EAAOU,IAAKD,QAEhE,uBAAGX,UAAU,mBAET,kBAAC,IAAD,CACAa,KAAMJ,EACNK,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCuGbC,E,4MAtGbC,MAAQ,G,EAuDRC,cAAgB,WAWd,OAVe,EAAKD,MAAME,OAAOX,KAAI,SAACY,GAEpC,OADAC,QAAQC,IAAIF,GACL,kBAAC,EAAD,CACLvB,MAAOuB,EAAMG,cACb7B,OAAQ0B,EAAMI,mBACdd,IAAKU,EAAMK,GACXnB,OAAQc,EAAMd,OACdC,SAAUa,EAAMb,e,EAOtBmB,SAAW,WACT,OAAOC,MAAM,iEAEVC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKZ,UACvBa,OAAM,SAAAC,GAAG,OAAIZ,QAAQC,IAAIW,O,EAI9BC,W,sBAAa,4BAAAC,EAAA,sEACU,EAAKT,WADf,OACLP,EADK,OAEX,EAAKiB,SAAS,CACZjB,WAHS,2C,mEA7DXE,QAAQC,IAAI,gB,0CAiCZK,MAAM,yDACNU,KAAKH,e,+BAkCE,IAEAf,EAAUkB,KAAKpB,MAAfE,OACP,OACE,yBAAKrB,UAAWqB,EAAS,MAAQ,gBAM9BkB,KAAKpB,MAAME,OAASkB,KAAKnB,gBAAkB,e,GArGlCoB,aCPEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.a958147f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Movie.css';\r\nimport propTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\n\r\nfunction Movie({title, poster, genres, synopsis}){\r\n    return(\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Column\">\r\n                <MoviePoster poster ={poster} alt={title} />\r\n            </div>\r\n            <div className=\"Movie__Column\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genre, index) =><MovieGenre genre={genre} key={index}/>)}\r\n                </div>\r\n                <p className=\"Movie__Synopsis\">\r\n                    {/* {synopsis} */}\r\n                    <LinesEllipsis\r\n                    text={synopsis}\r\n                    maxLine='3'\r\n                    ellipsis='...'\r\n                    trimRight\r\n                    basedOn='letters'\r\n                    />\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n// class Movie extends Component{\r\n\r\n//     static propTypes = {\r\n//         title: propTypes.string.isRequired,\r\n//         poster: propTypes.string.isRequired,\r\n//         genres: propTypes.array.isRequired,\r\n//         synopsis: propTypes.string.isRequired\r\n//     }\r\n//     render(){\r\n//         console.log(this.props)\r\n//         return(\r\n//             <div className=\"Movie\">\r\n//                 <div className=\"Movie_Columns\">\r\n//                     <MoviePoster poster={this.props.poster} />\r\n//                 </div>\r\n//                 <div className=\"Movie_Columns\">\r\n//                     <h1>{this.props.title}</h1>\r\n//                     <MovieGenre/>\r\n//                     <p>{this.props.synopsis}</p>\r\n//                 </div>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// class MoviePoster extends Component{\r\n//     static propTypes = {\r\n//         poster : propTypes.string.isRequired\r\n//     }\r\n//     render(){\r\n//         return(\r\n//             <img src={this.props.poster} alt=\"poster\"/>\r\n//         )\r\n//     }\r\n// }\r\nfunction MoviePoster({poster, alt}){\r\n    return(\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />\r\n    );\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n    return(\r\n    <span className=\"Movie__Genre\">{genre}</span>\r\n    );\r\n}\r\n\r\nMovie.propTypes = {\r\n    title: propTypes.string.isRequired,\r\n    poster: propTypes.string.isRequired,\r\n    genres: propTypes.array.isRequired,\r\n    synopsis: propTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster:propTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.prototype = {\r\n    genre : propTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\n//부모가 배열을 가지고있음 -> 자식은 props을 통해 호출가능\n// const movieTitle = [\n//   \"헝거게임\",\n//   \"올드보이\",\n//   \"장화홍련\",\n//   \"둘리\"\n// ]\n\n// const movieImages = [\n//   \"https://lh3.googleusercontent.com/proxy/2y5dA9UyKHUvMRMREwt4R4lNTfVtBWrfIWPsfM1AZyQrwrfY3ywfiXx1eaqpslo0to6Igip8GmRXIFiFKtWWry99En05zdf7-L6ERP9s0gvX0XbF4tbeFfWKt24lRb8neVzZfrw270HQd0XbZRCYABGoMkkcbUidL-g2C4qpD684kg\",\n//   \"https://t1.daumcdn.net/thumb/R720x0/?fname=http://t1.daumcdn.net/brunch/service/user/6rIc/image/gCQXUtxPRSKlcl8QbUzOIUtLpxI\",\n//   \"https://lh3.googleusercontent.com/proxy/ru5VIOGogTSBVCEdeXPEhJCYazWRK8e8xz47OnBxjsRA7Fn13aSShYR_wqG4205JIqI6VliTE-Ttgfp4x57LvqqyAD17ViU4rP2rxCQaSxxuvc30IO_b8F2KoTcl74t5l2cSN_SlVh0Dc8GZC_S8\",\n//   \"https://image.chosun.com/sitedata/image/201407/11/2014071102394_0.jpg\"\n// ]\n\nclass App extends Component {\n  //render : componentWillMount() > render() > componentDidMount()\n  //update : \n\n  //state가 생성할때마다 새로 render된다만 명심하면된다?\n  state = {\n    // greeting : 'hello!!!!!!!',\n    // movies : [\n    //   {\n    //     title: \"헝거게임\", poster: \"https://lh3.googleusercontent.com/proxy/2y5dA9UyKHUvMRMREwt4R4lNTfVtBWrfIWPsfM1AZyQrwrfY3ywfiXx1eaqpslo0to6Igip8GmRXIFiFKtWWry99En05zdf7-L6ERP9s0gvX0XbF4tbeFfWKt24lRb8neVzZfrw270HQd0XbZRCYABGoMkkcbUidL-g2C4qpD684kg\"\n    //   },\n    //   {\n    //     title: \"올드보이\", poster: \"https://t1.daumcdn.net/thumb/R720x0/?fname=http://t1.daumcdn.net/brunch/service/user/6rIc/image/gCQXUtxPRSKlcl8QbUzOIUtLpxI\"\n    //   },\n    //   {\n    //     title: \"장화홍련\", poster: \"https://lh3.googleusercontent.com/proxy/ru5VIOGogTSBVCEdeXPEhJCYazWRK8e8xz47OnBxjsRA7Fn13aSShYR_wqG4205JIqI6VliTE-Ttgfp4x57LvqqyAD17ViU4rP2rxCQaSxxuvc30IO_b8F2KoTcl74t5l2cSN_SlVh0Dc8GZC_S8\"\n    //   },\n    //   {\n    //     title: \"설국열차\", poster: \"https://image.chosun.com/sitedata/image/201407/11/2014071102394_0.jpg\"\n    //   }\n    // ]\n  }\n  componentWillMount() {\n    console.log('will mount')\n  }\n  componentDidMount() {\n    // console.log('did mount')\n    // setTimeout(()=>{\n    // this.state.greeting = 'hello again'//do not mutate state directly. here is solution\n    // this.setState({\n    // greeting:'hello again!!!!'\n\n    //5초뒤에 센과치히로가 뜨게\n    // movies : [\n    //         {\n    //            title: \"센과치히로의 행방불명\", poster: \"https://image.aladin.co.kr/product/13086/57/cover500/k792532994_1.jpg\"\n    //         }, ...this.state.movies\n    // ] \n\n    //5초뒤에 전체포스터출력\n    // movies : [\n    //   {\n    //     title: \"헝거게임\", poster: \"https://lh3.googleusercontent.com/proxy/2y5dA9UyKHUvMRMREwt4R4lNTfVtBWrfIWPsfM1AZyQrwrfY3ywfiXx1eaqpslo0to6Igip8GmRXIFiFKtWWry99En05zdf7-L6ERP9s0gvX0XbF4tbeFfWKt24lRb8neVzZfrw270HQd0XbZRCYABGoMkkcbUidL-g2C4qpD684kg\"\n    //   },\n    //   {\n    //     title: \"올드보이\", poster: \"https://t1.daumcdn.net/thumb/R720x0/?fname=http://t1.daumcdn.net/brunch/service/user/6rIc/image/gCQXUtxPRSKlcl8QbUzOIUtLpxI\"\n    //   },\n    //   {\n    //     title: \"장화홍련\", poster: \"https://lh3.googleusercontent.com/proxy/ru5VIOGogTSBVCEdeXPEhJCYazWRK8e8xz47OnBxjsRA7Fn13aSShYR_wqG4205JIqI6VliTE-Ttgfp4x57LvqqyAD17ViU4rP2rxCQaSxxuvc30IO_b8F2KoTcl74t5l2cSN_SlVh0Dc8GZC_S8\"\n    //   },\n    //   {\n    //     title: \"설국열차\", poster: \"https://image.chosun.com/sitedata/image/201407/11/2014071102394_0.jpg\"\n    //   }\n    // ]\n    //   })\n    // },5000)\n    fetch('https://yts.mx/api/v2/list_movies.json?sort_by=rating')\n    this._getMovies()\n  }\n  //1\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie) => {\n      console.log(movie)\n      return <Movie \n        title={movie.title_english} \n        poster={movie.medium_cover_image} \n        key={movie.id} \n        genres={movie.genres}\n        synopsis={movie.synopsis}\n      />\n    })\n    return movies\n  }\n\n  //2\n  _callApi = () => {\n    return fetch('https://yts.mx/api/v2/list_movies.json?sort_by=download_count')\n      // .then(potato => console.log(potato))\n      .then(potato => potato.json())\n      .then(json => json.data.movies)\n      .catch(err => console.log(err))\n  }\n\n  //3\n  _getMovies = async () => {\n    const movies = await this._callApi()\n    this.setState({\n      movies\n    })\n  }\n\n  render() {\n    // console.log('did render')\n    const {movies} = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {/* {this.state.greeting} */}\n        {/* {this.state.movies.map( (movie, index) => {\n        return <Movie title={movie.title} poster={movie.poster} key={index} />\n        })\n      } */}\n        {this.state.movies ? this._renderMovies() : 'loading'}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}